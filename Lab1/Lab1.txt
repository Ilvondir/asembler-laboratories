Michał Komsa - ASK - Lab 2


Zad. 1
void size() {
	printf("Rozmiar char: %d\n", sizeof(char));
	printf("Rozmiar short: %d\n", sizeof(short));
	printf("Rozmiar int: %d\n", sizeof(int));
	printf("Rozmiar long: %d\n", sizeof(long));
	printf("Rozmiar long int: %d\n", sizeof(long int));
	printf("Rozmiar long long: %d\n", sizeof(long long));
	printf("Rozmiar float: %d\n", sizeof(float));
	printf("Rozmiar double: %d\n", sizeof(double));
	printf("Rozmiar long double: %d\n", sizeof(long double));
}


Zad. 2
void size2() {
	printf("Rozmiar unsigned char: %d\n", sizeof(unsigned char));
	printf("Rozmiar unsigned short: %d\n", sizeof(unsigned short));
	printf("Rozmiar unsigned int: %d\n", sizeof(unsigned int));
	printf("Rozmiar unsigned long: %d\n", sizeof(unsigned long));
	printf("Rozmiar unsigned long int: %d\n", sizeof(unsigned long int));
	printf("Rozmiar unsigned long long: %d\n", sizeof(unsigned long long));
}


Zad. 3
1. Prawda
2. Fałsz
3. Prawda
4. Prawda


Zad. 4
1. Prawda
2. Prawda
3. Prawda
4. Prawda


Zad. 5
1. Adresy w kodzie 32bitowym zajmują 4 bajty.
2. Adresy w kodzie 64bitowym zajmują 8 bajtów.


Zad. 6
1. 16bitowe: 2^16 = 65536
2. 20bitowe: 2^20 = 1048576
3. 24bitowe: 2^24 = 16777216
4. 32bitowe: 2^32 = 4.294967296 × 10^9
5. 40bitowe: 2^40 = 1.0995116278 × 10^12
6. 48bitowe: 2^48 = 2.8147497671 × 10^14
7. 64bitowe: 2^64 = 1.8446744074 × 10^19


Zad. 7
void bits() {
	int bits = sizeof(void*) * 8;
    	printf("Ten program zostal skompilowany w %d bitach.\n", bits);
}


Zad. 8
p -> [1][0][0][0] *p = 1
p -> [0][1][0][0] *p = 1
p -> [0][0][1][0] *p = 1
p -> [0][0][0][1] *p = 1
Na 4 sposoby.


Zad. 9
little-endian
p -> [5][0][0][0] *p = 5
big-endian
p -> [0][0][0][5] *p = 5


Zad. 10
1011 (2) = 1*1 +  2*1 + 4*0 + 8*1 = 11 (10)
8732 (10) = 1*2 + 10*3 + 100*7 + 1000*8 = 8732 (10)
[2][2][1][1] (little endian) = 1*2 + 256*2 + 256*256*1 + 256*256*256*1 = 16843266 (10)
1234 (8) = 1*4 + 8*3 + 64*2 + 512*1 = 668 (10)
3A5B (16) = 1*11 + 16*5 + 256*10 + + 4096*3 = 14939 (10)


Zad. 11
little-endian
p -> [4][1][0][0] *p = 260
big-endian
p -> [0][0][1][4] *p = 260


Zad. 12
void bytes() {
	int number;
	printf("Podaj liczbe: ");
	scanf("%d", &number);
	
	int temp = number;
	int counter = 0;
	while (temp>0) {
		int mod = temp%256;
		
		if (mod<10) printf("[00%d] ", mod);
		if (mod>=10 && mod<100) printf("[0%d] ", mod);
		if (mod>100) printf("[%d] ", mod);
		
		temp = (temp-mod)/256;
		
		counter++;
	}
	
	int i = 0;
	for (i=counter; i<4; i++) printf("[000] ");
}


Zad. 13
Za pomocą polecania "lscpu"sprawdziłem, że procesor działa w architekturze x86_64, w porządku little-endian.


Zad. 14
void endian() {
	int i = 1;
	char *c = (char*)&i;
	if (*c == 1) printf("Procesor pracuje w little-endian.");
	else printf("Procesor pracuje w big-endian.");
}


Zad. 15
void endian2() {
	int i = 1;
    char *c = (char*)&i;
    if (*c == 1) printf("little-endian architecture");
	else printf("big-endian architecture");
}














